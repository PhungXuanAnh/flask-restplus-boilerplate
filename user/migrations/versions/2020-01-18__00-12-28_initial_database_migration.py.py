"""initial database migration

Revision ID: 51796ab1b4e0
Revises: 
Create Date: 2019-12-17 13:46:53.096680

"""
from alembic import op
import sqlalchemy as sa
import datetime
import uuid
import os
import sys
from flask_bcrypt import Bcrypt
from importlib import import_module

# revision identifiers, used by Alembic.
revision = '51796ab1b4e0'
down_revision = None
branch_labels = None
depends_on = None
flask_bcrypt = Bcrypt()

current_working_dir = os.getcwd()
user = import_module('app.main.model.user')


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('blacklist_tokens',
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('token', sa.String(length=500), nullable=False),
                    sa.Column('blacklisted_on', sa.DateTime(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('token')
                    )
    op.create_table('user',
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('email', sa.String(length=255), nullable=False),
                    sa.Column('registered_on', sa.DateTime(), nullable=False),
                    sa.Column('admin', sa.Boolean(), nullable=False),
                    sa.Column('public_id', sa.String(length=100), nullable=True),
                    sa.Column('username', sa.String(length=50), nullable=True),
                    sa.Column('password_hash', sa.String(length=100), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('email'),
                    sa.UniqueConstraint('public_id'),
                    sa.UniqueConstraint('username')
                    )

    op.bulk_insert(
        user.User.__table__,
        [
            {'id': 0, 'email': 'admin@gmail.com', 'registered_on': datetime.datetime.now(), 'admin': True, 'public_id': uuid.uuid4().hex, 'username': 'admin', 'password_hash': flask_bcrypt.generate_password_hash('admin').decode('utf-8')},
            {'id': 1, 'email': 'user1@gmail.com', 'registered_on': datetime.datetime.now(), 'admin': False, 'public_id': uuid.uuid4().hex, 'username': 'user1', 'password_hash': flask_bcrypt.generate_password_hash('1234').decode('utf-8')},
            {'id': 2, 'email': 'user2@gmail.com', 'registered_on': datetime.datetime.now(), 'admin': False, 'public_id': uuid.uuid4().hex, 'username': 'user2', 'password_hash': flask_bcrypt.generate_password_hash('1234').decode('utf-8')},
            {'id': 3, 'email': 'user3@gmail.com', 'registered_on': datetime.datetime.now(), 'admin': False, 'public_id': uuid.uuid4().hex, 'username': 'user3', 'password_hash': flask_bcrypt.generate_password_hash('1234').decode('utf-8')},
            {'id': 4, 'email': 'user4@gmail.com', 'registered_on': datetime.datetime.now(), 'admin': False, 'public_id': uuid.uuid4().hex, 'username': 'user4', 'password_hash': flask_bcrypt.generate_password_hash('1234').decode('utf-8')},
        ]
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user')
    op.drop_table('blacklist_tokens')
    # ### end Alembic commands ###
